{"remainingRequest":"/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/node_modules/babel-loader/lib/index.js??ref--0-1!/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/client/components/admin/admin-pages-visualize.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/client/components/admin/admin-pages-visualize.vue","mtime":1664186822113},{"path":"/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/.babelrc","mtime":1664186821976},{"path":"/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/node_modules/cache-loader/dist/cjs.js","mtime":1664187084848},{"path":"/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/node_modules/babel-loader/lib/index.js","mtime":1664187083149},{"path":"/Users/arhamfaraz/Documents/ISConsulting/67373-QCRI-1/node_modules/vue-loader/lib/index.js","mtime":1664187139939}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}